package me.rina.racc.client.modules.exploit;

// Revenant Module.
import me.rina.racc.Revenant;
import me.rina.racc.client.RevenantModule;

// Revenant Setting.
import me.rina.racc.client.RevenantSetting;

// Revenant Damage Block Event.
import me.rina.racc.event.update.RevenantDamageBlockEvent;

// Alpine.
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;

// Minecraft.
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.init.MobEffects;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;

// Java.
import java.util.ArrayList;

public class RevenantSpeedMine extends RevenantModule
{
    private RevenantSetting mineMode = newSetting(new String[]{"Mode", "SpeedMineMode", "Mode"}, BreakLogic.PACKET);
    private RevenantSetting haste = newSetting(new String[]{"Haste", "SpeedMineHaste", "Haste"}, false);

    public enum BreakLogic{
        PACKET,
        DAMAGE,
        INSTANT,
    }

    public RevenantSpeedMine(){
        super("SpeedMine", "SpeedMine", "Packet mines blocks", Category.EXPLOIT);
    }

    public void onUpdate(){
        Minecraft.getMinecraft().playerController.blockHitDelay = 0;

        if (haste.getBoolean()){
            PotionEffect effect = new PotionEffect(MobEffects.HASTE, 80950, 1, false, false);
            mc.player.addPotionEffect(new PotionEffect(effect));
        }
        if (!(haste.getBoolean()) && mc.player.isPotionActive(MobEffects.HASTE)){ //disables haste when you turn the setting off
            mc.player.removePotionEffect(MobEffects.HASTE);
        }
    }

    @EventHandler
    private final Listener<RevenantDamageBlockEvent> listener = new Listener<>(event -> {

        if (mc.world == null || mc.player == null){
            return;
        }
        if (canBreak(event.getPos())){

            switch ((BreakLogic) mineMode.getEnum())
            {
                case PACKET: {
                    mc.player.swingArm(EnumHand.MAIN_HAND);
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), event.getFace()));
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getFace()));
                    event.cancel();
                    break;
                }

                case DAMAGE: {
                    if (mc.playerController.curBlockDamageMP >= 0.7f) {
                        mc.playerController.curBlockDamageMP = 1.0f;
                    }
                    break;
                }

                case INSTANT: {
                    mc.player.swingArm(EnumHand.MAIN_HAND);
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), event.getFace()));
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getFace()));
                    mc.playerController.onPlayerDestroyBlock(event.getPos());
                    mc.world.setBlockToAir(event.getPos());
                    break;
                }
                default : {
                    return;
                }

            }
        }
    });

    private boolean canBreak(BlockPos pos){
        final IBlockState blockState = mc.world.getBlockState(pos);
        final Block block = blockState.getBlock();
        return block.getBlockHardness(blockState, mc.world, pos) != -1;
    }

    public void onDisable(){
        mc.player.removePotionEffect(MobEffects.HASTE);
    }
}
